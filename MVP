The Maze Project - MVP
A 3D Game Created Using SDL2

Minimum Viable Product (MVP) for the Maze Game with SDL2
Explanation
Walls

Objective: Create a 2D array to represent the maze and draw walls using SDL2 graphics library.
Implementation:
Define a 2D array to store the maze data.
Use SDL2 graphics library to draw walls by rendering rectangles or lines.
Orientation

Objective: Use the arrow keys to control the movement and rotation of the player in the maze.
Implementation:
Implement a function to handle user input using SDL_Event.
Update the player's position and orientation based on the input received from the user.
Move

Objective: Implement basic movement logic for the player. Allow the player to move forward, backward, left, and right in the maze.
Implementation:
Implement a function to update the player's position based on the current orientation and input received from the user.
Ouch

Objective: Add collision detection between the player and the walls. The player should not be able to move through the walls. If the player collides with a wall, stop the player's movement.
Implementation:
Implement a function to check for collision between the player and the walls.
If the player collides with a wall, stop the player's movement.
Parser

Objective: Create a simple parser to read the maze data from a text file and store it in a 2D array.
Implementation:
Implement a function to read the maze data from a text file.
Store the maze data in the 2D array.
Draw the Map

Objective: Draw the maze using the maze data stored in the 2D array. Use different colors for the walls and ground/ceiling to make them visually distinct.
Implementation:
Use the maze data stored in the 2D array to draw the maze.
Use different colors to distinguish between the walls and ground/ceiling.
Textures

Objective: Add basic textures to the walls using SDL2's texture rendering functions.
Implementation:
Implement a function to load wall textures.
Use SDL2's texture rendering functions to render textures on the walls.
These are the minimum features required to implement a basic maze game with SDL2.

Data Modelling
Walls: Represented by a 2D array, each element indicating if it's a wall or empty space.
Player: Has properties for position and orientation.
Maze: Array data structure holding the layout of the maze.
User Story
End users want to play a maze game using SDL2 to have fun solving the maze and challenging themselves to improve their speed and accuracy.

Main Menu: Allows starting a new game, loading a saved game, or quitting the game.
New Game: Select difficulty level, including maze size and number of obstacles.
In-Game Experience:
Controls: Use arrow keys for smooth and quick character movement without lag.
HUD: Display a countdown timer and score reflecting progress.
Collectibles: Collect coins or other rewards to increase score.
Obstacles: Encounter obstacles that slow down progress.
Completion:
End of Maze: Display a congratulatory message with final score and time.
Save Game: Option to save the game for future play.
Audio:
Sound Effects: Correspond to actions like collecting coins or hitting obstacles.
Background Music: Enhances excitement and challenge.
Visuals:
Graphics and Animations: High-quality and visually appealing to keep players engaged.

